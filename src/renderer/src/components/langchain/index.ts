import { OpenAI } from 'langchain/llms/openai'

/**
 * The LangChain class acts as a singleton wrapper around the OpenAI model.
 * It ensures there is only one instance of the model running and provides access to it.
 */
class LangChain {
  private static instance: LangChain
  private model: OpenAI

  /**
   * Initializes the LangChain instance with an OpenAI model.
   * @param {string} OPENAI_API_KEY - API Key for OpenAI
   * @private
   */
  private constructor(OPENAI_API_KEY: string) {
    const model = new OpenAI({ openAIApiKey: OPENAI_API_KEY, temperature: 0.9 })
    this.model = model
  }

  /**
   * Initializes the LangChain singleton instance.
   * @param {string} OPENAI_API_KEY - API Key for OpenAI
   * @public
   */
  public static init(OPENAI_API_KEY: string): void {
    if (!LangChain.instance) {
      LangChain.instance = new LangChain(OPENAI_API_KEY)
    }
  }

  /**
   * Returns the LangChain singleton instance.
   * Throws an error if the instance has not been initialized.
   * @returns {LangChain} The singleton instance of LangChain
   * @public
   */
  public static getInstance(): LangChain {
    LangChain.validateLangChain()
    return LangChain.instance
  }

  /**
   * Returns the OpenAI model associated with the LangChain singleton instance.
   * Throws an error if the instance has not been initialized.
   * @returns {OpenAI} The OpenAI model instance
   * @public
   */
  public static getModel(): OpenAI {
    LangChain.validateLangChain()
    return LangChain.instance.model
  }

  /**
   * Generates a completion using the OpenAI model.
   * @param {string} prompt - The initial string to complete
   * @returns {Promise<string>} The completed string generated by the model
   * @public
   */
  public async complete(prompt: string): Promise<string> {
    const completion = await this.model.call(prompt)
    return completion
  }

  /**
   * Validates if the LangChain instance has been initialized.
   * Throws an error if the instance has not been initialized.
   * @throws {Error} If the LangChain instance has not been initialized
   * @private
   */
  private static validateLangChain(): void {
    if (!LangChain.instance) throw new Error('LangChain instance not initialized');
  }
}

export { LangChain }
